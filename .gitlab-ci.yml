services:
  - postgres:latest
  - rabbitmq:latest

variables:
  DOCKER_IMAGE: ${CI_REGISTRY}/acs/public/villas/web-backend-go
  DOCKER_IMAGE_DEV: ${CI_REGISTRY}/acs/public/villas/web-backend-go/dev
  POSTGRES_DB: testvillasdb
  POSTGRES_USER: villas
  POSTGRES_PASSWORD: villas
  POSTGRES_HOST: postgres
  RABBITMQ_DEFAULT_USER: villas
  RABBITMQ_DEFAULT_PASS: villas
  AMQP_HOST: rabbitmq:5672
  AMQP_USER: villas
  AMQP_PASS: villas
  PORT: 4000
  GO_IMAGE: golang:1.13-buster

stages:
  - build
  - test
  - deploy

# Stage: build
##############################################################################

build:backend:
  stage: build
  tags:
    - docker
  image: ${GO_IMAGE}
  script:
    - go mod tidy
    - go install github.com/swaggo/swag/cmd/swag
    - swag init -p pascalcase -g "start.go" -o "./doc/api/"
    - go build
  artifacts:
    paths:
      - doc/api/swagger.json
      - doc/api/docs.go

build:docker:
  stage: build
  tags:
    - shell
    - linux
  script:
    - docker build -t ${DOCKER_IMAGE}:${CI_COMMIT_SHORT_SHA} .

# Stage: test
##############################################################################

test:gotest:
  stage: test
  variables:
    DB_NAME: ${POSTGRES_DB}
    DB_HOST: ${POSTGRES_HOST}
    DB_USER: ${POSTGRES_USER}
    DB_PASS: ${POSTGRES_PASSWORD}
    BASE_PATH: /api
    MODE: test
    ADMIN_USER: User_0
    ADMIN_PASS: xyz789
  tags:
    - docker
  image: ${GO_IMAGE}
  script:
    - go mod tidy
    - go test $(go list ./... )
       -p 1
       -covermode=count
       -coverprofile ./testcover.txt
    - go tool cover -func=testcover.txt
  dependencies:
    - build:backend

test:database:
  stage: test
  variables:
    TEST_FOLDER: database
    MODE: test
    DB_NAME: ${POSTGRES_DB}
    DB_HOST: ${POSTGRES_HOST}
    DB_USER: ${POSTGRES_USER}
    DB_PASS: ${POSTGRES_PASSWORD}
  tags:
    - docker
  image: ${GO_IMAGE}
  script:
    - go mod tidy
    - cd ${TEST_FOLDER}
    - go test -v
  dependencies:
    - build:backend

test:scenario:
  extends: test:database
  variables:
    TEST_FOLDER: routes/scenario

test:component-configuration:
  extends: test:database
  variables:
    TEST_FOLDER: routes/component-configuration

test:signal:
  extends: test:database
  variables:
    TEST_FOLDER: routes/signal

test:dashboard:
  extends: test:database
  variables:
    TEST_FOLDER: routes/dashboard

test:widget:
  extends: test:database
  variables:
    TEST_FOLDER: routes/widget

test:infrastructure-component:
  extends: test:database
  variables:
    TEST_FOLDER: routes/infrastructure-component

test:file:
  extends: test:database
  variables:
    TEST_FOLDER: routes/file

test:user:
  extends: test:database
  variables:
    TEST_FOLDER: routes/user

test:healthz:
  extends: test:database
  variables:
    TEST_FOLDER: routes/healthz

# Stage: deploy
##############################################################################

deploy:docker:
  stage: deploy
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - docker push ${DOCKER_IMAGE}:${CI_COMMIT_SHORT_SHA}
  dependencies:
    - build:docker
  only:
    - master
  tags:
    - shell
    - linux
