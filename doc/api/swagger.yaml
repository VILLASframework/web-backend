basePath: http://localhost:4000/api/v2/
definitions:
  component_configuration.addConfigRequest:
    properties:
      config:
        $ref: '#/definitions/component_configuration.validNewConfig'
        type: object
    type: object
  component_configuration.updateConfigRequest:
    properties:
      config:
        $ref: '#/definitions/component_configuration.validUpdatedConfig'
        type: object
    type: object
  component_configuration.validNewConfig:
    properties:
      FileIDs:
        items:
          type: integer
        type: array
      ICID:
        type: integer
      Name:
        type: string
      ScenarioID:
        type: integer
      StartParameters:
        type: string
    required:
    - ICID
    - Name
    - ScenarioID
    - StartParameters
    type: object
  component_configuration.validUpdatedConfig:
    properties:
      FileIDs:
        items:
          type: integer
        type: array
      ICID:
        type: integer
      Name:
        type: string
      StartParameters:
        type: string
    type: object
  dashboard.addDashboardRequest:
    properties:
      dashboard:
        $ref: '#/definitions/dashboard.validNewDashboard'
        type: object
    type: object
  dashboard.updateDashboardRequest:
    properties:
      dashboard:
        $ref: '#/definitions/dashboard.validUpdatedDashboard'
        type: object
    type: object
  dashboard.validNewDashboard:
    properties:
      Grid:
        type: integer
      Height:
        type: integer
      Name:
        type: string
      ScenarioID:
        type: integer
    required:
    - Grid
    - Name
    - ScenarioID
    type: object
  dashboard.validUpdatedDashboard:
    properties:
      grid:
        type: integer
      height:
        type: integer
      name:
        type: string
    type: object
  database.ComponentConfiguration:
    properties:
      fileIDs:
        description: Array of file IDs used by the component configuration
        type: string
      icID:
        description: ID of IC associated with Component Configuration
        type: integer
      id:
        type: integer
      inputLength:
        description: Number of input signals
        type: integer
      name:
        description: Name of Component Configuration
        type: string
      outputLength:
        description: Number of output signals
        type: integer
      scenarioID:
        description: ID of Scenario to which Component Configuration belongs
        type: integer
      startParameters:
        description: Start parameters of Component Configuration as JSON
        type: string
    type: object
  database.Dashboard:
    properties:
      grid:
        description: Grid of dashboard
        type: integer
      height:
        description: Height of dashboard
        type: integer
      id:
        type: integer
      name:
        description: Name of dashboard
        type: string
      scenarioID:
        description: ID of scenario to which dashboard belongs
        type: integer
    type: object
  database.File:
    properties:
      date:
        description: Last modification time of file
        type: string
      id:
        type: integer
      name:
        description: Name of file
        type: string
      scenarioID:
        description: ID of Scenario to which file belongs
        type: integer
      size:
        description: Size of file (in byte)
        type: integer
      type:
        description: Type of file (MIME type)
        type: string
    type: object
  database.InfrastructureComponent:
    properties:
      apihost:
        description: Host of API for IC
        type: string
      category:
        description: Category of IC (simulator, gateway, database, etc.)
        type: string
      host:
        description: Host if the IC
        type: string
      id:
        type: integer
      name:
        description: Name of the IC
        type: string
      properties:
        description: Properties of IC as JSON string
        type: string
      rawProperties:
        description: Raw properties of IC as JSON string
        type: string
      state:
        description: State of the IC
        type: string
      stateUpdateAt:
        description: Time of last state update
        type: string
      type:
        description: Type of IC (RTDS, VILLASnode, RTDS, etc.)
        type: string
      uptime:
        description: Uptime of the IC
        type: integer
      uuid:
        description: UUID of the IC
        type: string
    type: object
  database.Scenario:
    properties:
      id:
        type: integer
      name:
        description: Name of scenario
        type: string
      running:
        description: Running state of scenario
        type: boolean
      startParameters:
        description: Start parameters of scenario as JSON
        type: string
    type: object
  database.Signal:
    properties:
      configID:
        description: ID of Component Configuration
        type: integer
      direction:
        description: Direction of the signal (in or out)
        type: string
      id:
        type: integer
      index:
        description: Index of the Signal in the mapping
        type: integer
      name:
        description: Name of Signal
        type: string
      scalingFactor:
        description: Scaling factor for the signal raw value (defaults to 1.0)
        type: number
      unit:
        description: Unit of Signal
        type: string
    type: object
  database.User:
    properties:
      active:
        description: Indicating status of user (false means user is inactive and should
          not be able to login)
        type: boolean
      id:
        type: integer
      mail:
        description: Mail of user
        type: string
      role:
        description: Role of user
        type: string
      username:
        description: Username of user
        type: string
    type: object
  database.Widget:
    properties:
      customProperties:
        description: Custom properties of widget as JSON string
        type: string
      dashboardID:
        description: ID of dashboard to which widget belongs
        type: integer
      height:
        description: Height of widget
        type: integer
      id:
        type: integer
      isLocked:
        description: Locked state of widget
        type: boolean
      minHeight:
        description: Minimal height of widget
        type: integer
      minWidth:
        description: Minimal width of widget
        type: integer
      name:
        description: Name of widget
        type: string
      signalIDs:
        description: IDs of signals that widget uses
        type: string
      type:
        description: Type of widget
        type: string
      width:
        description: Width of widget
        type: integer
      x:
        description: X position of widget
        type: integer
      "y":
        description: Y position of widget
        type: integer
      z:
        description: Z position of widget
        type: integer
    type: object
  docs.ResponseAuthenticate:
    properties:
      message:
        type: string
      success:
        type: boolean
      token:
        type: string
      user:
        $ref: '#/definitions/database.User'
        type: object
    type: object
  docs.ResponseConfig:
    properties:
      config:
        $ref: '#/definitions/database.ComponentConfiguration'
        type: object
    type: object
  docs.ResponseConfigs:
    properties:
      configs:
        items:
          $ref: '#/definitions/database.ComponentConfiguration'
        type: array
    type: object
  docs.ResponseDashboard:
    properties:
      dashboard:
        $ref: '#/definitions/database.Dashboard'
        type: object
    type: object
  docs.ResponseDashboards:
    properties:
      dashboards:
        items:
          $ref: '#/definitions/database.Dashboard'
        type: array
    type: object
  docs.ResponseError:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  docs.ResponseFile:
    properties:
      file:
        $ref: '#/definitions/database.File'
        type: object
    type: object
  docs.ResponseFiles:
    properties:
      files:
        items:
          $ref: '#/definitions/database.File'
        type: array
    type: object
  docs.ResponseIC:
    properties:
      ic:
        $ref: '#/definitions/database.InfrastructureComponent'
        type: object
    type: object
  docs.ResponseICs:
    properties:
      ics:
        items:
          $ref: '#/definitions/database.InfrastructureComponent'
        type: array
    type: object
  docs.ResponseScenario:
    properties:
      scenario:
        $ref: '#/definitions/database.Scenario'
        type: object
    type: object
  docs.ResponseScenarios:
    properties:
      scenarios:
        items:
          $ref: '#/definitions/database.Scenario'
        type: array
    type: object
  docs.ResponseSignal:
    properties:
      signal:
        $ref: '#/definitions/database.Signal'
        type: object
    type: object
  docs.ResponseSignals:
    properties:
      signals:
        items:
          $ref: '#/definitions/database.Signal'
        type: array
    type: object
  docs.ResponseUser:
    properties:
      user:
        $ref: '#/definitions/database.User'
        type: object
    type: object
  docs.ResponseUsers:
    properties:
      users:
        items:
          $ref: '#/definitions/database.User'
        type: array
    type: object
  docs.ResponseWidget:
    properties:
      widget:
        $ref: '#/definitions/database.Widget'
        type: object
    type: object
  docs.ResponseWidgets:
    properties:
      widgets:
        items:
          $ref: '#/definitions/database.Widget'
        type: array
    type: object
  infrastructure_component.addICRequest:
    properties:
      ic:
        $ref: '#/definitions/infrastructure_component.validNewIC'
        type: object
    type: object
  infrastructure_component.updateICRequest:
    properties:
      ic:
        $ref: '#/definitions/infrastructure_component.validUpdatedIC'
        type: object
    type: object
  infrastructure_component.validNewIC:
    properties:
      APIHost:
        type: string
      Category:
        type: string
      Host:
        type: string
      Name:
        type: string
      Properties:
        type: string
      State:
        type: string
      Type:
        type: string
      UUID:
        type: string
    required:
    - Category
    - Name
    - Type
    - UUID
    type: object
  infrastructure_component.validUpdatedIC:
    properties:
      APIHost:
        type: string
      Category:
        type: string
      Host:
        type: string
      Name:
        type: string
      Properties:
        type: string
      State:
        type: string
      Type:
        type: string
      UUID:
        type: string
    type: object
  scenario.addScenarioRequest:
    properties:
      scenario:
        $ref: '#/definitions/scenario.validNewScenario'
        type: object
    type: object
  scenario.updateScenarioRequest:
    properties:
      scenario:
        $ref: '#/definitions/scenario.validUpdatedScenario'
        type: object
    type: object
  scenario.validNewScenario:
    properties:
      Name:
        type: string
      Running:
        type: boolean
      StartParameters:
        type: string
    required:
    - Name
    - StartParameters
    type: object
  scenario.validUpdatedScenario:
    properties:
      Name:
        type: string
      Running:
        type: boolean
      StartParameters:
        type: string
    type: object
  signal.addSignalRequest:
    properties:
      signal:
        $ref: '#/definitions/signal.validNewSignal'
        type: object
    type: object
  signal.updateSignalRequest:
    properties:
      signal:
        $ref: '#/definitions/signal.validUpdatedSignal'
        type: object
    type: object
  signal.validNewSignal:
    properties:
      ConfigID:
        type: integer
      Direction:
        type: string
      Index:
        type: integer
      Name:
        type: string
      ScalingFactor:
        type: number
      Unit:
        type: string
    required:
    - ConfigID
    - Direction
    - Index
    - Name
    type: object
  signal.validUpdatedSignal:
    properties:
      Index:
        type: integer
      Name:
        type: string
      ScalingFactor:
        type: number
      Unit:
        type: string
    type: object
  user.addUserRequest:
    properties:
      user:
        $ref: '#/definitions/user.validNewUser'
        type: object
    type: object
  user.loginRequest:
    properties:
      Password:
        type: string
      Username:
        type: string
    required:
    - Password
    - Username
    type: object
  user.updateUserRequest:
    properties:
      user:
        $ref: '#/definitions/user.validUpdatedRequest'
        type: object
    type: object
  user.validNewUser:
    properties:
      Mail:
        type: string
      Password:
        type: string
      Role:
        type: string
      Username:
        type: string
    required:
    - Mail
    - Password
    - Role
    - Username
    type: object
  user.validUpdatedRequest:
    properties:
      Active:
        type: string
      Mail:
        type: string
      OldPassword:
        type: string
      Password:
        type: string
      Role:
        type: string
      Username:
        type: string
    type: object
  widget.addWidgetRequest:
    properties:
      widget:
        $ref: '#/definitions/widget.validNewWidget'
        type: object
    type: object
  widget.updateWidgetRequest:
    properties:
      widget:
        $ref: '#/definitions/widget.validUpdatedWidget'
        type: object
    type: object
  widget.validNewWidget:
    properties:
      CustomProperties:
        type: string
      DashboardID:
        type: integer
      Height:
        type: integer
      IsLocked:
        type: boolean
      MinHeight:
        type: integer
      MinWidth:
        type: integer
      Name:
        type: string
      SignalIDs:
        items:
          type: integer
        type: array
      Type:
        type: string
      Width:
        type: integer
      X:
        type: integer
      "Y":
        type: integer
      Z:
        type: integer
    required:
    - DashboardID
    - Height
    - Name
    - Type
    - Width
    type: object
  widget.validUpdatedWidget:
    properties:
      CustomProperties:
        type: string
      Height:
        type: integer
      IsLocked:
        type: boolean
      MinHeight:
        type: integer
      MinWidth:
        type: integer
      Name:
        type: string
      SignalIDs:
        items:
          type: integer
        type: array
      Type:
        type: string
      Width:
        type: integer
      X:
        type: integer
      "Y":
        type: integer
      Z:
        type: integer
    type: object
info:
  contact:
    email: sonja.happ@eonerc.rwth-aachen.de
    name: Sonja Happ
  description: |-
    This is the [VILLASweb Backend](https://git.rwth-aachen.de/acs/public/villas/web-backend-go) API v2.0.
    This documentation is auto-generated based on the API documentation in the code. The tool [swag](https://github.com/swaggo/swag) is used to auto-generate API docs for the [gin-gonic](https://github.com/gin-gonic/gin) framework.
    Authentication: Use the authenticate endpoint below to obtain a token for your user account, copy the token into to the value field of the dialog showing up for the green Authorize button below and confirm with Done.
  license:
    name: GNU GPL 3.0
    url: http://www.gnu.de/documents/gpl-3.0.en.html
  title: VILLASweb Backend API
  version: "2.0"
paths:
  /authenticate:
    post:
      consumes:
      - application/json
      operationId: authenticate
      parameters:
      - description: loginRequest of user
        in: body
        name: inputUser
        required: true
        schema:
          $ref: '#/definitions/user.loginRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: JSON web token, success status, message and authenticated user
            object
          schema:
            $ref: '#/definitions/docs.ResponseAuthenticate'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error.
          schema:
            $ref: '#/definitions/docs.ResponseError'
      summary: Authentication for user
      tags:
      - authentication
  /configs:
    get:
      operationId: getConfigs
      parameters:
      - description: Scenario ID
        in: query
        name: scenarioID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Component configurations which belong to scenario
          schema:
            $ref: '#/definitions/docs.ResponseConfigs'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Get all component configurations of scenario
      tags:
      - component-configurations
    post:
      consumes:
      - application/json
      operationId: addConfig
      parameters:
      - description: component configuration to be added incl. IDs of scenario and
          IC
        in: body
        name: inputConfig
        required: true
        schema:
          $ref: '#/definitions/component_configuration.addConfigRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Component configuration that was added
          schema:
            $ref: '#/definitions/docs.ResponseConfig'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Add a component configuration to a scenario
      tags:
      - component-configurations
  /configs/{configID}:
    delete:
      operationId: deleteConfig
      parameters:
      - description: Config ID
        in: path
        name: configID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: component configuration that was deleted
          schema:
            $ref: '#/definitions/docs.ResponseConfig'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Delete a component configuration
      tags:
      - component-configurations
    get:
      operationId: getConfig
      parameters:
      - description: Config ID
        in: path
        name: configID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: component configuration that was requested
          schema:
            $ref: '#/definitions/docs.ResponseConfig'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Get a component configuration
      tags:
      - component-configurations
    put:
      consumes:
      - application/json
      operationId: updateConfig
      parameters:
      - description: component configuration to be updated
        in: body
        name: inputConfig
        required: true
        schema:
          $ref: '#/definitions/component_configuration.updateConfigRequest'
          type: object
      - description: Config ID
        in: path
        name: configID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Component configuration that was added
          schema:
            $ref: '#/definitions/docs.ResponseConfig'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Update a component configuration
      tags:
      - component-configurations
  /dashboards:
    get:
      operationId: getDashboards
      parameters:
      - description: Scenario ID
        in: query
        name: scenarioID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Dashboards which belong to scenario
          schema:
            $ref: '#/definitions/docs.ResponseDashboards'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Get all dashboards of scenario
      tags:
      - dashboards
    post:
      consumes:
      - application/json
      operationId: addDashboard
      parameters:
      - description: Dashboard to be added incl. ID of Scenario
        in: body
        name: inputDab
        required: true
        schema:
          $ref: '#/definitions/dashboard.addDashboardRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Dashboard that was added
          schema:
            $ref: '#/definitions/docs.ResponseDashboard'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Add a dashboard to a scenario
      tags:
      - dashboards
  /dashboards/{dashboardID}:
    delete:
      operationId: deleteDashboard
      parameters:
      - description: Dashboard ID
        in: path
        name: dashboardID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Dashboard that was deleted
          schema:
            $ref: '#/definitions/docs.ResponseDashboard'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Delete a dashboard
      tags:
      - dashboards
    get:
      operationId: getDashboard
      parameters:
      - description: Dashboard ID
        in: path
        name: dashboardID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Dashboard that was requested
          schema:
            $ref: '#/definitions/docs.ResponseDashboard'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Get a dashboard
      tags:
      - dashboards
    put:
      consumes:
      - application/json
      operationId: updateDashboard
      parameters:
      - description: Dashboard to be updated
        in: body
        name: inputDab
        required: true
        schema:
          $ref: '#/definitions/dashboard.updateDashboardRequest'
          type: object
      - description: Dashboard ID
        in: path
        name: dashboardID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Dashboard that was updated
          schema:
            $ref: '#/definitions/docs.ResponseDashboard'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Update a dashboard
      tags:
      - dashboards
  /files:
    get:
      operationId: getFiles
      parameters:
      - description: Scenario ID
        in: query
        name: scenarioID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Files which belong to scenario
          schema:
            $ref: '#/definitions/docs.ResponseFiles'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Get all files of a specific scenario
      tags:
      - files
    post:
      consumes:
      - text/plain
      - image/png
      - image/jpeg
      - image/gif
      - model/x-cim
      - model/x-cim.zip
      - multipart/form-data
      operationId: addFile
      parameters:
      - description: File to be uploaded
        in: formData
        name: inputFile
        required: true
        type: file
      - description: ID of scenario to which file shall be added
        in: query
        name: scenarioID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: File that was added
          schema:
            $ref: '#/definitions/docs.ResponseFile'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Add a file to a specific scenario
      tags:
      - files
  /files/{fileID}:
    delete:
      operationId: deleteFile
      parameters:
      - description: ID of the file to update
        in: path
        name: fileID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: File that was deleted
          schema:
            $ref: '#/definitions/docs.ResponseFile'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Delete a file
      tags:
      - files
    get:
      operationId: getFile
      parameters:
      - description: ID of the file to download
        in: path
        name: fileID
        required: true
        type: integer
      produces:
      - text/plain
      - image/png
      - image/jpeg
      - image/gif
      - model/x-cim
      - model/x-cim.zip
      responses:
        "200":
          description: File that was requested
          schema:
            $ref: '#/definitions/docs.ResponseFile'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Download a file
      tags:
      - files
    put:
      consumes:
      - text/plain
      - image/png
      - image/jpeg
      - image/gif
      - model/x-cim
      - model/x-cim.zip
      - multipart/form-data
      operationId: updateFile
      parameters:
      - description: File to be uploaded
        in: formData
        name: inputFile
        required: true
        type: file
      - description: ID of the file to update
        in: path
        name: fileID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: File that was updated
          schema:
            $ref: '#/definitions/docs.ResponseFile'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Update a file
      tags:
      - files
  /healthz:
    get:
      operationId: getHealth
      produces:
      - application/json
      responses:
        "200":
          description: Backend is healthy, database and AMQP broker connections are
            alive
        "500":
          description: Backend is NOT healthy
          schema:
            $ref: '#/definitions/docs.ResponseError'
      summary: Get health status of backend
      tags:
      - healthz
  /ic:
    get:
      operationId: getICs
      produces:
      - application/json
      responses:
        "200":
          description: ICs requested
          schema:
            $ref: '#/definitions/docs.ResponseICs'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Get all infrastructure components
      tags:
      - infrastructure-components
    post:
      consumes:
      - application/json
      operationId: addIC
      parameters:
      - description: Infrastructure Component to be added
        in: body
        name: inputIC
        required: true
        schema:
          $ref: '#/definitions/infrastructure_component.addICRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Infrastructure Component that was added
          schema:
            $ref: '#/definitions/docs.ResponseIC'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Add an infrastructure component
      tags:
      - infrastructure-components
  /ic/{ICID}:
    delete:
      operationId: deleteIC
      parameters:
      - description: Infrastructure Component ID
        in: path
        name: ICID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Infrastructure Component that was deleted
          schema:
            $ref: '#/definitions/docs.ResponseIC'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Delete an infrastructure component
      tags:
      - infrastructure-components
    get:
      operationId: getIC
      parameters:
      - description: Infrastructure Component ID
        in: path
        name: ICID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Infrastructure Component that was requested
          schema:
            $ref: '#/definitions/docs.ResponseIC'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Get infrastructure component
      tags:
      - infrastructure-components
    put:
      consumes:
      - application/json
      operationId: updateIC
      parameters:
      - description: InfrastructureComponent to be updated
        in: body
        name: inputIC
        required: true
        schema:
          $ref: '#/definitions/infrastructure_component.updateICRequest'
          type: object
      - description: InfrastructureComponent ID
        in: path
        name: ICID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Infrastructure Component that was updated
          schema:
            $ref: '#/definitions/docs.ResponseIC'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Update an infrastructure component
      tags:
      - infrastructure-components
  /ic/{ICID}/action:
    post:
      operationId: sendActionToIC
      parameters:
      - description: Action for IC
        in: query
        name: inputAction
        required: true
        type: string
      - description: InfrastructureComponent ID
        in: path
        name: ICID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Action sent successfully
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Send an action to IC (only available if backend server is started with
        -amqp parameter)
      tags:
      - AMQP
  /ic/{ICID}/configs:
    get:
      operationId: getConfigsOfIC
      parameters:
      - description: Infrastructure Component ID
        in: path
        name: ICID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Configs requested by user
          schema:
            $ref: '#/definitions/docs.ResponseConfigs'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Get all configurations of the infrastructure component
      tags:
      - infrastructure-components
  /metrics:
    get:
      operationId: getMetrics
      produces:
      - application/json
      responses:
        "200":
          description: Returns Prometheus metrics
      summary: Prometheus metrics endpoint
      tags:
      - metrics
  /scenarios:
    get:
      operationId: getScenarios
      produces:
      - application/json
      responses:
        "200":
          description: Scenarios to which user has access
          schema:
            $ref: '#/definitions/docs.ResponseScenarios'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Get all scenarios of requesting user
      tags:
      - scenarios
    post:
      consumes:
      - application/json
      operationId: addScenario
      parameters:
      - description: Scenario to be added
        in: body
        name: inputScenario
        required: true
        schema:
          $ref: '#/definitions/scenario.addScenarioRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: scenario that was added
          schema:
            $ref: '#/definitions/docs.ResponseScenario'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Add a scenario
      tags:
      - scenarios
  /scenarios/{scenarioID}:
    delete:
      operationId: deleteScenario
      parameters:
      - description: Scenario ID
        in: path
        name: scenarioID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Deleted scenario
          schema:
            $ref: '#/definitions/docs.ResponseScenario'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Delete a scenario
      tags:
      - scenarios
    get:
      operationId: getScenario
      parameters:
      - description: Scenario ID
        in: path
        name: scenarioID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Scenario requested by user
          schema:
            $ref: '#/definitions/docs.ResponseScenario'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Get scenario
      tags:
      - scenarios
    put:
      consumes:
      - application/json
      operationId: updateScenario
      parameters:
      - description: Scenario to be updated
        in: body
        name: inputScenario
        required: true
        schema:
          $ref: '#/definitions/scenario.updateScenarioRequest'
          type: object
      - description: Scenario ID
        in: path
        name: scenarioID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Updated scenario.
          schema:
            $ref: '#/definitions/docs.ResponseScenario'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Update a scenario
      tags:
      - scenarios
  /scenarios/{scenarioID}/user:
    delete:
      operationId: deleteUserFromScenario
      parameters:
      - description: Scenario ID
        in: path
        name: scenarioID
        required: true
        type: integer
      - description: User name
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User that was deleted from scenario
          schema:
            $ref: '#/definitions/docs.ResponseUser'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Delete a user from a scenario
      tags:
      - scenarios
    put:
      operationId: addUserToScenario
      parameters:
      - description: Scenario ID
        in: path
        name: scenarioID
        required: true
        type: integer
      - description: User name
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User that was added to scenario
          schema:
            $ref: '#/definitions/docs.ResponseUser'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Add a user to a a scenario
      tags:
      - scenarios
  /scenarios/{scenarioID}/users/:
    get:
      operationId: getUsersOfScenario
      parameters:
      - description: Scenario ID
        in: path
        name: scenarioID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Array of users that have access to the scenario
          schema:
            $ref: '#/definitions/docs.ResponseUsers'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Get users of a scenario
      tags:
      - scenarios
  /signals:
    get:
      operationId: getSignals
      parameters:
      - description: Direction of signal (in or out)
        in: query
        name: direction
        required: true
        type: string
      - description: Config ID of signals to be obtained
        in: query
        name: configID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Signals which belong to component configuration
          schema:
            $ref: '#/definitions/docs.ResponseSignals'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Get all signals of one direction
      tags:
      - signals
    post:
      consumes:
      - application/json
      operationId: AddSignal
      parameters:
      - description: A signal to be added to the component configuration incl. direction
          and config ID to which signal shall be added
        in: body
        name: inputSignal
        required: true
        schema:
          $ref: '#/definitions/signal.addSignalRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Signal that was added
          schema:
            $ref: '#/definitions/docs.ResponseSignal'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Add a signal to a signal mapping of a component configuration
      tags:
      - signals
  /signals/{signalID}:
    delete:
      operationId: deleteSignal
      parameters:
      - description: ID of signal to be deleted
        in: path
        name: signalID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Signal that was deleted
          schema:
            $ref: '#/definitions/docs.ResponseSignal'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Delete a signal
      tags:
      - signals
    get:
      operationId: getSignal
      parameters:
      - description: ID of signal to be obtained
        in: path
        name: signalID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Signal that was requested
          schema:
            $ref: '#/definitions/docs.ResponseSignal'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Get a signal
      tags:
      - signals
    put:
      operationId: updateSignal
      parameters:
      - description: A signal to be updated
        in: body
        name: inputSignal
        required: true
        schema:
          $ref: '#/definitions/signal.updateSignalRequest'
          type: object
      - description: ID of signal to be updated
        in: path
        name: signalID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Signal that was updated
          schema:
            $ref: '#/definitions/docs.ResponseSignal'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Update a signal
      tags:
      - signals
  /users:
    get:
      operationId: GetUsers
      produces:
      - application/json
      responses:
        "200":
          description: Array of users
          schema:
            $ref: '#/definitions/docs.ResponseUsers'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      operationId: AddUser
      parameters:
      - description: User to be added
        in: body
        name: inputUser
        required: true
        schema:
          $ref: '#/definitions/user.addUserRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Contains added user object
          schema:
            $ref: '#/definitions/docs.ResponseUser'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Add a user
      tags:
      - users
  /users/{userID}:
    delete:
      operationId: DeleteUser
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: deleted user
          schema:
            $ref: '#/definitions/docs.ResponseUser'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Delete a user
      tags:
      - users
    get:
      operationId: GetUser
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: requested user
          schema:
            $ref: '#/definitions/docs.ResponseUser'
        "403":
          description: Access forbidden.
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Get user
      tags:
      - users
    put:
      consumes:
      - application/json
      operationId: UpdateUser
      parameters:
      - description: User to be updated (anything except for ID can be changed, role
          can only be change by admin)
        in: body
        name: inputUser
        required: true
        schema:
          $ref: '#/definitions/user.updateUserRequest'
          type: object
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Contains updated user
          schema:
            $ref: '#/definitions/docs.ResponseUser'
        "400":
          description: Bad request.
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "403":
          description: Access forbidden.
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Update a user
      tags:
      - users
  /widgets:
    get:
      operationId: getWidgets
      parameters:
      - description: Dashboard ID
        in: query
        name: dashboardID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Widgets to which belong to dashboard
          schema:
            $ref: '#/definitions/docs.ResponseWidgets'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Get all widgets of dashboard
      tags:
      - widgets
    post:
      consumes:
      - application/json
      operationId: addWidget
      parameters:
      - description: Widget to be added incl. ID of dashboard
        in: body
        name: inputWidget
        required: true
        schema:
          $ref: '#/definitions/widget.addWidgetRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Widget that was added
          schema:
            $ref: '#/definitions/docs.ResponseWidget'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Add a widget to a dashboard
      tags:
      - widgets
  /widgets/{widgetID}:
    delete:
      operationId: deleteWidget
      parameters:
      - description: Widget ID
        in: path
        name: widgetID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Widget that was deleted
          schema:
            $ref: '#/definitions/docs.ResponseWidget'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Delete a widget
      tags:
      - widgets
    get:
      operationId: getWidget
      parameters:
      - description: Widget ID
        in: path
        name: widgetID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Widget that was requested
          schema:
            $ref: '#/definitions/docs.ResponseWidget'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Get a widget
      tags:
      - widgets
    put:
      consumes:
      - application/json
      operationId: updateWidget
      parameters:
      - description: Widget to be updated
        in: body
        name: inputWidget
        required: true
        schema:
          $ref: '#/definitions/widget.updateWidgetRequest'
          type: object
      - description: Widget ID
        in: path
        name: widgetID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Widget that was updated
          schema:
            $ref: '#/definitions/docs.ResponseWidget'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/docs.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/docs.ResponseError'
      security:
      - Bearer: []
      summary: Update a widget
      tags:
      - widgets
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
